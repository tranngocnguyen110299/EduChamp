@model TN_academic.ViewModels.UserRegisterModel
@{
    ViewBag.Title = "Register";
    Layout = "~/Views/Shared/_Layout_login.cshtml";
}

<div class="account-form-inner">
    <div class="account-container">
        <div class="heading-bx left">
            <h2 class="title-head">Sign Up <span>Now</span></h2>
            <p>Login Your Account <a href="~/Login/">Click here</a></p>
        </div>
        @using (Html.BeginForm("Index", "Register", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            <div class="contact-bx">
                <div class="row placeani">
                    <div class="col-lg-12">
                        <div class="form-group">
                            <div class="input-group">
                                @Html.LabelFor(model => model.Username)
                                @Html.EditorFor(model => model.Username, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Username, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-12">
                        <div class="form-group">
                            <div class="input-group">
                                @Html.LabelFor(model => model.Password)
                                @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @type = "password", @class = "form-control", @id = "password", @Value = "" } })
                                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-12">
                        <div class="form-group">
                            <div class="input-group">
                                @Html.LabelFor(model => model.FirstName)
                                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-12">
                        <div class="form-group">
                            <div class="input-group">
                                @Html.LabelFor(model => model.LastName)
                                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-12">
                        <div class="form-group">
                            <div class="input-group">
                                @Html.EditorFor(model => model.DOB, new { htmlAttributes = new { @class = "form-control oso", @type = "date" } })
                                @Html.ValidationMessageFor(model => model.DOB, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-12">
                        <div class="form-group">
                            <div class="input-group">
                                @Html.RadioButtonFor(model => model.Gender, true, new { Checked = "checked" })
                                <span>Male</span>&emsp;&emsp;
                                @Html.RadioButtonFor(model => model.Gender, false)
                                <span>Female</span>
                                @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-12">
                        <div class="form-group">
                            <div class="input-group">
                                @Html.LabelFor(model => model.Phone)
                                @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-lg-12">
                        <div class="form-group">
                            <div class="input-group">
                                @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label" })
                                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", @id = "txtEmail" } })
                                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-12">
                        <div class="form-group">
                            <div class="input-group">
                                @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label" })
                                @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-12">
                        <div class="form-group">
                            <div class="file-input">
                                <input type="file" id="file" class="file" name="ImageFile">
                                <label for="file" class="fName">
                                    Select your avatar
                                </label>
                            </div>

                            @Html.ValidationMessageFor(model => model.ImageFile, "", new { @class = "text-danger" })

                        </div>
                        <input type="hidden" id="ImageFile" name="ImageFile" />
                    </div>
                    <br />
                    <br />
                    <br />
                    <br />
                    <div class="col-lg-12 m-b30">
                        <button name="submit" type="submit" value="Submit" class="btn button-md">Sign Up</button>
                    </div>

                </div>
            </div>
        }
    </div>
</div>

@section ClientScript{
    <style>
        /*#ImageFile {
            outline: 0;
            border-width: 0 0 1px;
        }*/

        .file {
            opacity: 0;
            width: 0.1px;
            height: 0.1px;
            position: absolute;
        }

        .file-input label {
            display: block;
            position: relative;
            width: 200px;
            height: 50px;
            border-radius: 25px;
            background: linear-gradient(40deg, #ff6ec4, #7873f5);
            box-shadow: 0 4px 7px rgba(0, 0, 0, 0.4);
            display: flex;
            align-items: center;
            justify-content: center;
            color: #fff;
            font-weight: bold;
            cursor: pointer;
            transition: transform .2s ease-out;
        }

        input:hover + label,
        input:focus + label {
            transform: scale(1.02);
        }

        input:focus + label {
            outline: 1px solid #000;
            outline: -webkit-focus-ring-color auto 2px;
        }

        .file-name {
            position: absolute;
            bottom: -35px;
            left: 10px;
            font-size: 0.85rem;
            color: #555;
        }
    </style>
    @Styles.Render("~/asset/css/form")
    @Scripts.Render("~/asset/scripts/form")

    <script>
        const file = document.querySelector('#file');
        file.addEventListener('change', (e) => {
            // Get the selected file
            const [file] = e.target.files;
            // Get the file name and size
            const { name: fileName, size } = file;
            // Convert size in bytes to kilo bytes
            const fileSize = (size / 1000).toFixed(2);
            // Set the text content
            const fileNameAndSize = `${fileName}`;
            //document.querySelector('.file-name').textContent = fileNameAndSize;
            document.querySelector('.fName').textContent = fileNameAndSize;
            $("#ImageFile").val([file]);
        });
    </script>
}

